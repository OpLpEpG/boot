function ( stm32_add_flags FLAGNAME VALUE_LIST )
	list ( REMOVE_AT ARGV 0 )
	foreach ( VALUE ${ARGV} )
		string ( APPEND VALUES "${VALUE} " )
	endforeach ()
	set ( ${FLAGNAME} "${${FLAGNAME}} ${VALUES}" PARENT_SCOPE )
endfunction ()

macro ( stm32_copy_file SOURCE DEST OVERWRITE )
	if ( ${OVERWRITE} )
		configure_file ( ${SOURCE} ${DEST} COPYONLY )
	elseif ( NOT EXISTS ${DEST} )
		configure_file ( ${SOURCE} ${DEST} COPYONLY )
	endif ()
endmacro ()

function ( stm32_find VARIABLE_NAME PATH )
	file ( TO_CMAKE_PATH "${PATH}" PATH )
	if ( DEFINED ARGV2 )
		set ( TYPE "${ARGV2}" )
	else ()
		set ( TYPE "" )
	endif ()
	if ( EXISTS ${PATH} )
		if ( "${TYPE}" STREQUAL "DIRECTORY" )
			get_filename_component ( PATH ${PATH} DIRECTORY )
		endif ()
		set ( ${VARIABLE_NAME} "${PATH}" PARENT_SCOPE )
	else ()
		set ( ${VARIABLE_NAME} "${VARIABLE_NAME}-NOTFOUND" PARENT_SCOPE )
	endif ()
endfunction ()

function ( unit_conversion VALUEUE RETURN_VALUEUE )
	string ( LENGTH "${VALUEUE}" LENGTH )
	math ( EXPR LENGTH "${LENGTH} - 1" )
	if ( ${VALUEUE} MATCHES "[M]" )
		string ( SUBSTRING "${VALUEUE}" 0 ${LENGTH} VALUEUE )
		math ( EXPR VALUEUE "${VALUEUE} * 1024 * 1024" )
	elseif ( ${VALUEUE} MATCHES "[K]" )
		string ( SUBSTRING "${VALUEUE}" 0 ${LENGTH} VALUEUE )
		math ( EXPR VALUEUE "${VALUEUE} * 1024" )
	else ()
		message ( FATAL_ERROR "Invalid argument." )
	endif ()
	set ( ${RETURN_VALUEUE} ${VALUEUE} PARENT_SCOPE )
endfunction ()

macro ( hexidecimal_character_to_decimal VALUEUE RETURN_VALUEUE )
	if ( ${VALUEUE} MATCHES "[0-9]" )
		set ( ${RETURN_VALUEUE} ${VALUEUE} )
	elseif ( ${VALUEUE} MATCHES "[aA]" )
		set ( ${RETURN_VALUEUE} 10 )
	elseif ( ${VALUEUE} MATCHES "[bB]" )
		set ( ${RETURN_VALUEUE} 11 )
	elseif ( ${VALUEUE} MATCHES "[cC]" )
		set ( ${RETURN_VALUEUE} 12 )
	elseif ( ${VALUEUE} MATCHES "[dD]" )
		set ( ${RETURN_VALUEUE} 13 )
	elseif ( ${VALUEUE} MATCHES "[eE]" )
		set ( ${RETURN_VALUEUE} 14 )
	elseif ( ${VALUEUE} MATCHES "[fF]" )
		set ( ${RETURN_VALUEUE} 15 )
	else ()
		message ( FATAL_ERROR "Invalid format for hexidecimal character" )
	endif ()
endmacro ( hexidecimal_character_to_decimal )

function ( hexadecimal_to_decimal VALUEUE RETURN_VALUEUE )
	if ( ${VALUEUE} EQUAL 0 )
		set ( ${RETURN_VALUEUE} 0 )
	else ()
		set ( INDEX 0 )
		string ( LENGTH "${VALUEUE}" LENGTH )
		if ( ${VALUEUE} MATCHES "0x" )
			string ( SUBSTRING "${VALUEUE}" 2 ${LENGTH} VALUEUE )
			string ( LENGTH "${VALUEUE}" LENGTH )
		endif ()

		set ( ${RETURN_VALUEUE} 0 )

		while ( INDEX LESS LENGTH )
			string ( SUBSTRING "${VALUEUE}" ${INDEX} 1 HEXADECIMAL_CHARACTER )
			hexidecimal_character_to_decimal ( ${HEXADECIMAL_CHARACTER} HEXADECIMAL_CHARACTER )
			math ( EXPR POWAH "( 1 << ( ( ${LENGTH} - ${INDEX} - 1 ) * 4 ) )" )
			math ( EXPR HEXADECIMAL_CHARACTER "${HEXADECIMAL_CHARACTER} * ${POWAH}" )
			math ( EXPR ${RETURN_VALUEUE} "${${RETURN_VALUEUE}} + ${HEXADECIMAL_CHARACTER}" )
			math ( EXPR INDEX "${INDEX} + 1" )
		endwhile ()
	endif ()
	set ( ${RETURN_VALUEUE} ${${RETURN_VALUEUE}} PARENT_SCOPE )
endfunction ( hexadecimal_to_decimal )

macro ( decimal_character_to_hexidecimal VALUE RETURN_VALUEUE )
	if ( ${VALUE} LESS 10 )
		set ( ${RETURN_VALUEUE} ${VALUE} )
	elseif ( ${VALUE} EQUAL 10 )
		set ( ${RETURN_VALUEUE} "A" )
	elseif ( ${VALUE} EQUAL 11 )
		set ( ${RETURN_VALUEUE} "B" )
	elseif ( ${VALUE} EQUAL 12 )
		set ( ${RETURN_VALUEUE} "C" )
	elseif ( ${VALUE} EQUAL 13 )
		set ( ${RETURN_VALUEUE} "D" )
	elseif ( ${VALUE} EQUAL 14 )
		set ( ${RETURN_VALUEUE} "E" )
	elseif ( ${VALUE} EQUAL 15 )
		set ( ${RETURN_VALUEUE} "F" )
	else ()
		message ( FATAL_ERROR "Invalid format for decimal character" )
	endif ()
endmacro ( decimal_character_to_hexidecimal )

function ( decimal_to_hexidecimal VALUE RETURN_VALUEUE )
	if ( ${VALUE} EQUAL 0 )
		set ( ${RETURN_VALUEUE} 0 )
	else ()
		set ( ${RETURN_VALUEUE} "" )

		while ( ${VALUE} GREATER 0 )
			math ( EXPR CHAR_VALUE "${VALUE} & 15" )
			decimal_character_to_hexidecimal ( ${CHAR_VALUE} CHAR_VALUE )
			set ( ${RETURN_VALUEUE} "${CHAR_VALUE}${${RETURN_VALUEUE}}" )
			math ( EXPR VALUE "${VALUE} >> 4" )
		endwhile ()
	endif ()
	set ( ${RETURN_VALUEUE} ${${RETURN_VALUEUE}} PARENT_SCOPE )
endfunction ( decimal_to_hexidecimal )
